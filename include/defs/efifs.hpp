#ifndef EFIFS_HPP
#define EFIFS_HPP

#include "defs/undefix.hpp"
#include "types/untypes.hpp"

struct EFI_FILE_IO_TOKEN{
    EFI_EVENT Event;
    EFI_STATUS Status;
    UINTN BufferSize;
    void* Buffer;
};

struct EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;
struct EFI_FILE_PROTOCOL;

typedef EFI_STATUS (EFIAPI *EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME)(IN EFI_SIMPLE_FILE_SYSTEM_PROTOCOL* _this, OUT EFI_FILE_PROTOCOL** root);

using EFI_FILE = EFI_FILE_PROTOCOL;
using EFI_FILE_HANDLE = EFI_FILE_PROTOCOL*;
using EFI_FILE_IO_INTERFACE = EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;

typedef EFI_STATUS (EFIAPI *EFI_FILE_OPEN)(IN EFI_FILE_PROTOCOL* _this, OUT EFI_FILE_PROTOCOL** newHandle, IN CHAR16* fileName, IN UINT64 openMode, IN UINT64 attributes);
typedef EFI_STATUS (EFIAPI *EFI_FILE_CLOSE)(IN EFI_FILE_PROTOCOL* _this);
typedef EFI_STATUS (EFIAPI *EFI_FILE_DELETE)(IN EFI_FILE_PROTOCOL* _this);
typedef EFI_STATUS (EFIAPI *EFI_FILE_READ)(IN EFI_FILE_PROTOCOL* _this, IN OUT UINTN* bufferSize, OUT void* buffer);
typedef EFI_STATUS (EFIAPI *EFI_FILE_WRITE)(IN EFI_FILE_PROTOCOL* _this, IN OUT UINTN* bufferSize, IN void* buffer);
typedef EFI_STATUS (EFIAPI *EFI_FILE_GET_POSITION)(IN EFI_FILE_PROTOCOL* _this, OUT UINT64* position);
typedef EFI_STATUS (EFIAPI *EFI_FILE_SET_POSITION)(IN EFI_FILE_PROTOCOL* _this, IN UINT64 position);
typedef EFI_STATUS (EFIAPI *EFI_FILE_GET_INFO)(IN EFI_FILE_PROTOCOL* _this, IN EFI_GUID* informationType, IN OUT UINTN* bufferSize, OUT void* buffer);
typedef EFI_STATUS (EFIAPI *EFI_FILE_SET_INFO)(IN EFI_FILE_PROTOCOL* _this, IN EFI_GUID* informationType, IN UINTN bufferSize, IN void* buffer);
typedef EFI_STATUS (EFIAPI *EFI_FILE_FLUSH)(IN EFI_FILE_PROTOCOL* _this);
typedef EFI_STATUS (EFIAPI *EFI_FILE_OPEN_EX)(IN EFI_FILE_PROTOCOL* _this, OUT EFI_FILE_PROTOCOL** newHandle, IN CHAR16* fileName, IN UINT64 openMode, IN UINT64 attributes, IN OUT EFI_FILE_IO_TOKEN* token);
typedef EFI_STATUS (EFIAPI *EFI_FILE_READ_EX)(IN EFI_FILE_PROTOCOL* _this, IN OUT EFI_FILE_IO_TOKEN* token);
typedef EFI_STATUS (EFIAPI *EFI_FILE_WRITE_EX)(IN EFI_FILE_PROTOCOL* _this, IN OUT EFI_FILE_IO_TOKEN* token);
typedef EFI_STATUS (EFIAPI *EFI_FILE_FLUSH_EX)(IN EFI_FILE_PROTOCOL* _this, IN OUT EFI_FILE_IO_TOKEN* token);

struct EFI_SIMPLE_FILE_SYSTEM_PROTOCOL{
    UINT64 Revision;
    EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME OpenVolume;
};

struct EFI_FILE_PROTOCOL{
    UINT64 Revision;
    EFI_FILE_OPEN Open;
    EFI_FILE_CLOSE Close;
    EFI_FILE_DELETE Delete;
    EFI_FILE_READ Read;
    EFI_FILE_WRITE Write;

    EFI_FILE_GET_POSITION GetPosition;
    EFI_FILE_SET_POSITION SetPosition;

    EFI_FILE_GET_INFO GetInfo;
    EFI_FILE_SET_INFO SetInfo;

    EFI_FILE_FLUSH Flush;

    EFI_FILE_OPEN_EX OpenEx;
    EFI_FILE_READ_EX ReadEx;

    EFI_FILE_WRITE_EX WriteEx;
    EFI_FILE_FLUSH_EX FlushEx;
};

#define EFI_FILE_MODE_READ 0x0000000000000001ULL
#define EFI_FILE_MODE_WRITE 0x0000000000000002ULL
#define EFI_FILE_MODE_CREATE 0x8000000000000000ULL
#define EFI_FILE_READ_ONLY 0x0000000000000001ULL
#define EFI_FILE_HIDDEN 0x0000000000000002ULL
#define EFI_FILE_SYSTEM 0x0000000000000004ULL
#define EFI_FILE_RESERVED 0x0000000000000008ULL
#define EFI_FILE_DIRECTORY 0x0000000000000010ULL
#define EFI_FILE_ARCHIVE 0x0000000000000020ULL
#define EFI_FILE_VALID_ATTR 0x0000000000000037ULL
#define EFI_FILE_PROTOCOL_REVISION 0x00010000
#define EFI_FILE_PROTOCOL_REVISION2 0x00020000

constexpr EFI_GUID EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID = {0x964e5b22, 0x6459, 0x11d2, {0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b}};

#endif // EFIFS_HPP
